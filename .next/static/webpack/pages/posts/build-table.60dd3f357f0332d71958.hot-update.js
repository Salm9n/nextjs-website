self["webpackHotUpdate_N_E"]("pages/posts/build-table",{

/***/ "./pages/posts/build-table.js":
/*!************************************!*\
  !*** ./pages/posts/build-table.js ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ BasicTable; }
/* harmony export */ });
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ "./node_modules/react/jsx-dev-runtime.js");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _material_ui_core_styles__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @material-ui/core/styles */ "./node_modules/@material-ui/core/esm/styles/index.js");
/* harmony import */ var _material_ui_core_Table__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @material-ui/core/Table */ "./node_modules/@material-ui/core/esm/Table/index.js");
/* harmony import */ var _material_ui_core_TableBody__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @material-ui/core/TableBody */ "./node_modules/@material-ui/core/esm/TableBody/index.js");
/* harmony import */ var _material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @material-ui/core/TableCell */ "./node_modules/@material-ui/core/esm/TableCell/index.js");
/* harmony import */ var _material_ui_core_TableContainer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @material-ui/core/TableContainer */ "./node_modules/@material-ui/core/esm/TableContainer/index.js");
/* harmony import */ var _material_ui_core_TableHead__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @material-ui/core/TableHead */ "./node_modules/@material-ui/core/esm/TableHead/index.js");
/* harmony import */ var _material_ui_core_TableRow__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @material-ui/core/TableRow */ "./node_modules/@material-ui/core/esm/TableRow/index.js");
/* harmony import */ var _material_ui_core_Paper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @material-ui/core/Paper */ "./node_modules/@material-ui/core/esm/Paper/index.js");
/* module decorator */ module = __webpack_require__.hmd(module);


var _jsxFileName = "C:\\Users\\salm9\\Documents\\JS_Progs\\salman-proj\\pages\\posts\\build-table.js",
    _s = $RefreshSig$();










var useStyles = (0,_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_2__.makeStyles)({
  table: {
    maxWidth: 500
  },
  tableHead: {
    backgroundColor: 'orange'
  },
  tableRow: {
    padding: "1"
  }
});

function createCountry(abv, name) {
  return {
    abv: abv,
    name: name
  };
}

var rows = [createCountry('AF', 'Afghanistan'), createCountry('AX', 'Åland Islands'), createCountry('AL', 'Albania'), createCountry('DZ', 'Algeria'), createCountry('AS', 'American Samoa'), createCountry('AD', 'Andorra'), createCountry('AO', 'Angola'), createCountry('AI', 'Anguilla'), createCountry('AQ', 'Antarctica'), createCountry('AG', 'Antigua and Barbuda'), createCountry('AR', 'Argentina'), createCountry('AM', 'Armenia'), createCountry('AW', 'Aruba'), createCountry('AU', 'Australia'), createCountry('AT', 'Austria'), createCountry('AZ', 'Azerbaijan'), createCountry('BS', 'Bahamas (the)'), createCountry('BH', 'Bahrain'), createCountry('BD', 'Bangladesh'), createCountry('BB', 'Barbados'), createCountry('BY', 'Belarus'), createCountry('BE', 'Belgium'), createCountry('BZ', 'Belize'), createCountry('BJ', 'Benin'), createCountry('BM', 'Bermuda'), createCountry('BT', 'Bhutan'), createCountry('BO', 'Bolivia (Plurinational State of)'), createCountry('BQ', 'Bonaire, Sint Eustatius and Saba'), createCountry('BA', 'Bosnia and Herzegovina'), createCountry('BW', 'Botswana'), createCountry('BV', 'Bouvet Island'), createCountry('BR', 'Brazil'), createCountry('IO', 'British Indian Ocean Territory(the)'), createCountry('BN', 'Brunei Darussalam'), createCountry('BG', 'Bulgaria'), createCountry('BF', 'Burkina Faso'), createCountry('BI', 'Burundi'), createCountry('CV', 'Cabo Verde'), createCountry('KH', 'Cambodia'), createCountry('CM', 'Cameroon'), createCountry('CA', 'Canada'), createCountry('KY', 'Cayman Islands (the)'), createCountry('CF', 'Central African Republic (the)'), createCountry('TD', 'Chad'), createCountry('CL', 'Chile'), createCountry('CN', 'China'), createCountry('CX', 'Christmas Island'), createCountry('CC', 'Cocos (Keeling) Islands (the)'), createCountry('CO', 'Colombia'), createCountry('KM', 'Comoros (the)'), createCountry('CD', 'Congo (the Democratic Republic of the)'), createCountry('CG', 'Congo (the)'), createCountry('CK', 'Cook Islands (the)'), createCountry('CR', 'Costa Rica'), createCountry('HR', 'Croatia'), createCountry('CU', 'Cuba'), createCountry('CW', 'Curaçao'), createCountry('CY', 'Cyprus'), createCountry('CZ', 'Czechia'), createCountry('CI', 'Côte d\'Ivoire'), createCountry('DK', 'Denmark'), createCountry('DJ', 'Djibouti'), createCountry('DM', 'Dominica'), createCountry('DO', 'Dominican Republic (the)'), createCountry('EC', 'Ecuador'), createCountry('EG', 'Egypt'), createCountry('SV', 'El Salvador'), createCountry('GQ', 'Equatorial Guinea'), createCountry('ER', 'Eritrea'), createCountry('EE', 'Estonia'), createCountry('SZ', 'Eswatini'), createCountry('ET', 'Ethiopia'), createCountry('FK', 'Falkland Islands (the) [Malvinas]'), createCountry('FO', 'Faroe Islands (the)'), createCountry('FJ', 'Fiji'), createCountry('FI', 'Finland'), createCountry('FR', 'France'), createCountry('GF', 'French Guiana'), createCountry('PF', 'French Polynesia'), createCountry('TF', 'French Southern Territories (the)'), createCountry('GA', 'Gabon'), createCountry('GM', 'Gambia (the)'), createCountry('GE', 'Georgia'), createCountry('DE', 'Germany'), createCountry('GH', 'Ghana'), createCountry('GI', 'Gibraltar'), createCountry('GR', 'Greece'), createCountry('GL', 'Greenland'), createCountry('GD', 'Grenada'), createCountry('GP', 'Guadeloupe'), createCountry('GU', 'Guam'), createCountry('GT', 'Guatemala'), createCountry('GG', 'Guernsey'), createCountry('GN', 'Guinea'), createCountry('GW', 'Guinea-Bissau'), createCountry('GY', 'Guyana'), createCountry('HT', 'Haiti'), createCountry('HM', 'Heard Island and McDonald Islands'), createCountry('VA', 'Holy See (the)'), createCountry('HN', 'Honduras'), createCountry('HK', 'Hong Kong'), createCountry('HU', 'Hungary'), createCountry('IS', 'Iceland'), createCountry('IN', 'India'), createCountry('ID', 'Indonesia'), createCountry('IR', 'Iran (Islamic Republic of)'), createCountry('IQ', 'Iraq'), createCountry('IE', 'Ireland'), createCountry('IM', 'Isle of Man'), createCountry('IL', 'Israel'), createCountry('IT', 'Italy'), createCountry('JM', 'Jamaica'), createCountry('JP', 'Japan'), createCountry('JE', 'Jersey'), createCountry('JO', 'Jordan'), createCountry('KZ', 'Kazakhstan'), createCountry('KE', 'Kenya'), createCountry('KI', 'Kiribati'), createCountry('KP', 'Korea (the Democratic People\'s Republic of)'), createCountry('KR', 'Korea (the Republic of)'), createCountry('KW', 'Kuwait'), createCountry('KG', 'Kyrgyzstan'), createCountry('LA', 'Lao People\'s Democratic Republic (the)'), createCountry('LV', 'Latvia'), createCountry('LB', 'Lebanon'), createCountry('LS', 'Lesotho'), createCountry('LR', 'Liberia'), createCountry('LY', 'Libya'), createCountry('LI', 'Liechtenstein'), createCountry('LT', 'Lithuania'), createCountry('LU', 'Luxembourg'), createCountry('MO', 'Macao'), createCountry('MG', 'Madagascar'), createCountry('MW', 'Malawi'), createCountry('MY', 'Malaysia'), createCountry('MV', 'Maldives'), createCountry('ML', 'Mali'), createCountry('MT', 'Malta'), createCountry('MH', 'Marshall Islands (the)'), createCountry('MQ', 'Martinique'), createCountry('MR', 'Mauritania'), createCountry('MU', 'Mauritius'), createCountry('YT', 'Mayotte'), createCountry('MX', 'Mexico'), createCountry('FM', 'Micronesia (Federated States of)'), createCountry('MD', 'Moldova (the Republic of)'), createCountry('MC', 'Monaco'), createCountry('MN', 'Mongolia'), createCountry('ME', 'Montenegro'), createCountry('MS', 'Montserrat'), createCountry('MA', 'Morocco'), createCountry('MZ', 'Mozambique'), createCountry('MM', 'Myanmar'), createCountry('NA', 'Namibia'), createCountry('NR', 'Nauru'), createCountry('NP', 'Nepal'), createCountry('NL', 'Netherlands (the)'), createCountry('NC', 'New Caledonia'), createCountry('NZ', 'New Zealand'), createCountry('NI', 'Nicaragua'), createCountry('NE', 'Niger (the)'), createCountry('NG', 'Nigeria'), createCountry('NU', 'Niue'), createCountry('NF', 'Norfolk Island'), createCountry('MP', 'Northern Mariana Islands (the)'), createCountry('NO', 'Norway'), createCountry('OM', 'Oman'), createCountry('PK', 'Pakistan'), createCountry('PW', 'Palau'), createCountry('PS', 'Palestine, State of'), createCountry('PA', 'Panama'), createCountry('PG', 'Papua New Guinea'), createCountry('PY', 'Paraguay'), createCountry('PE', 'Peru'), createCountry('PH', 'Philippines (the)'), createCountry('PN', 'Pitcairn'), createCountry('PL', 'Poland'), createCountry('PT', 'Portugal'), createCountry('PR', 'Puerto Rico'), createCountry('QA', 'Qatar'), createCountry('MK', 'Republic of North Macedonia'), createCountry('RO', 'Romania'), createCountry('RU', 'Russian Federation (the)'), createCountry('RW', 'Rwanda'), createCountry('RE', 'Réunion'), createCountry('BL', 'Saint Barthélemy'), createCountry('SH', 'Saint Helena, Ascension and Tristan da Cunha'), createCountry('KN', 'Saint Kitts and Nevis'), createCountry('LC', 'Saint Lucia'), createCountry('MF', 'Saint Martin (French part)'), createCountry('PM', 'Saint Pierre and Miquelon'), createCountry('VC', 'Saint Vincent and the Grenadines'), createCountry('WS', 'Samoa'), createCountry('SM', 'San Marino'), createCountry('ST', 'Sao Tome and Principe'), createCountry('SA', 'Saudi Arabia'), createCountry('SN', 'Senegal'), createCountry('RS', 'Serbia'), createCountry('SC', 'Seychelles'), createCountry('SL', 'Sierra Leone'), createCountry('SG', 'Singapore'), createCountry('SX', 'Sint Maarten (Dutch part)'), createCountry('SK', 'Slovakia'), createCountry('SI', 'Slovenia'), createCountry('SB', 'Solomon Islands'), createCountry('SO', 'Somalia'), createCountry('ZA', 'South Africa'), createCountry('GS', 'South Georgia and the South Sandwich Islands'), createCountry('SS', 'South Sudan'), createCountry('ES', 'Spain'), createCountry('LK', 'Sri Lanka'), createCountry('SD', 'Sudan (the)'), createCountry('SR', 'Suriname'), createCountry('SJ', 'Svalbard and Jan Mayen'), createCountry('SE', 'Sweden'), createCountry('CH', 'Switzerland'), createCountry('SY', 'Syrian Arab Republic'), createCountry('TW', 'Taiwan (Province of China)'), createCountry('TJ', 'Tajikistan'), createCountry('TZ', 'Tanzania, United Republic of'), createCountry('TH', 'Thailand'), createCountry('TL', 'Timor-Leste'), createCountry('TG', 'Togo'), createCountry('TK', 'Tokelau'), createCountry('TO', 'Tonga'), createCountry('TT', 'Trinidad and Tobago'), createCountry('TN', 'Tunisia'), createCountry('TR', 'Turkey'), createCountry('TM', 'Turkmenistan'), createCountry('TC', 'Turks and Caicos Islands (the)'), createCountry('TV', 'Tuvalu'), createCountry('UG', 'Uganda'), createCountry('UA', 'Ukraine'), createCountry('AE', 'United Arab Emirates (the)'), createCountry('GB', 'United Kingdom of Great Britain and Northern Ireland (the)'), createCountry('UM', 'United States Minor Outlying Islands (the)'), createCountry('US', 'United States of America (the)'), createCountry('UY', 'Uruguay'), createCountry('UZ', 'Uzbekistan'), createCountry('VU', 'Vanuatu'), createCountry('VE', 'Venezuela (Bolivarian Republic of)'), createCountry('VN', 'Viet Nam'), createCountry('VG', 'Virgin Islands (British)'), createCountry('VI', 'Virgin Islands (U.S.)'), createCountry('WF', 'Wallis and Futuna'), createCountry('EH', 'Western Sahara'), createCountry('YE', 'Yemen'), createCountry('ZM', 'Zambia'), createCountry('ZW', 'Zimbabwe')];
function BasicTable() {
  _s();

  var _this = this;

  var classes = useStyles();
  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_material_ui_core_TableContainer__WEBPACK_IMPORTED_MODULE_3__.default, {
    component: _material_ui_core_Paper__WEBPACK_IMPORTED_MODULE_4__.default,
    children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_material_ui_core_Table__WEBPACK_IMPORTED_MODULE_5__.default, {
      className: classes.table,
      "aria-label": "simple table",
      children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_material_ui_core_TableHead__WEBPACK_IMPORTED_MODULE_6__.default, {
        className: classes.tableHead,
        children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_material_ui_core_TableRow__WEBPACK_IMPORTED_MODULE_7__.default, {
          className: classes.tableRow,
          children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_8__.default, {
            children: "Country Name"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 289,
            columnNumber: 13
          }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_8__.default, {
            align: "right",
            children: "Abbreviation"
          }, void 0, false, {
            fileName: _jsxFileName,
            lineNumber: 290,
            columnNumber: 13
          }, this)]
        }, void 0, true, {
          fileName: _jsxFileName,
          lineNumber: 288,
          columnNumber: 11
        }, this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 287,
        columnNumber: 9
      }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_material_ui_core_TableBody__WEBPACK_IMPORTED_MODULE_9__.default, {
        children: rows.map(function (row) {
          return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_material_ui_core_TableRow__WEBPACK_IMPORTED_MODULE_7__.default, {
            children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_8__.default, {
              component: "th",
              scope: "row",
              children: row.name
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 296,
              columnNumber: 15
            }, _this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_material_ui_core_TableCell__WEBPACK_IMPORTED_MODULE_8__.default, {
              align: "right",
              children: row.abv
            }, void 0, false, {
              fileName: _jsxFileName,
              lineNumber: 299,
              columnNumber: 15
            }, _this)]
          }, row.name, true, {
            fileName: _jsxFileName,
            lineNumber: 295,
            columnNumber: 13
          }, _this);
        })
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 293,
        columnNumber: 9
      }, this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 286,
      columnNumber: 7
    }, this)
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 285,
    columnNumber: 5
  }, this);
}

_s(BasicTable, "8g5FPXexvSEOsxdmU7HicukHGqY=", false, function () {
  return [useStyles];
});

_c = BasicTable;

var _c;

$RefreshReg$(_c, "BasicTable");

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }


/***/ })

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,